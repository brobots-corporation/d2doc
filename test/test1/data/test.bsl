
// Извлекает информация о таблицах, используемых в схеме или запросе.
//   Обработка исключений (например, в случае передачи некорректного текста запроса) выполняется вызывающим кодом.
//
// Параметры:
//  Объект - СхемаКомпоновкиДанных, Строка - Схема отчета или текст запроса.
//
// Возвращаемое значение:
//  Массив - Имена таблиц, используемые в схеме или запросе.
//
// Пример:
//	// Вызов из собственной формы отчета, использующего СКД.
//	ИспользуемыеТаблицы = ВариантыОтчетов.ИспользуемыеТаблицы(РеквизитФормыВЗначение("Отчет").СхемаКомпоновкиДанных);
//	ВариантыОтчетов.ПроверитьИспользуемыеТаблицы(ИспользуемыеТаблицы);
//	// Вызов из обработчика ПриКомпоновкеРезультата отчета, использующего СКД.
//	ИспользуемыеТаблицы = ВариантыОтчетов.ИспользуемыеТаблицы(ЭтотОбъект.СхемаКомпоновкиДанных);
//	ВариантыОтчетов.ПроверитьИспользуемыеТаблицы(ИспользуемыеТаблицы);
//	// Вызов из обработчика ПриКомпоновкеРезультата отчета, использующего запрос.
//	ИспользуемыеТаблицы = ВариантыОтчетов.ИспользуемыеТаблицы(ТекстЗапроса);
//	ВариантыОтчетов.ПроверитьИспользуемыеТаблицы(ИспользуемыеТаблицы);
//
Функция ИспользуемыеТаблицы(Объект) Экспорт
	Таблицы = Новый Массив;
	Если ТипЗнч(Объект) = Тип("СхемаКомпоновкиДанных") Тогда
		ЗарегистрироватьТаблицыНаборовДанных(Таблицы, Объект.НаборыДанных);
	ИначеЕсли ТипЗнч(Объект) = Тип("Строка") Тогда
		ЗарегистрироватьТаблицыЗапроса(Таблицы, Объект);
	КонецЕсли;
	Возврат Таблицы;
КонецФункции

#Область Область1 
#Область ВложеннаяОбласть



// Регистрирует информацию о ходе выполнения длительной операции.
// В дальнейшем ее можно считать при помощи функции ДлительныеОперации.ПрочитатьПрогресс.
// Во избежание избыточного потребления памяти и ее утечек при выполнении одной длительной операции 
// не следует сообщать прогресс более 100 раз.
//
// Параметры:
//  Процент                 - Число        - Процент выполнения.
//  Текст                   - Строка       - Информация о текущей операции.
//  ДополнительныеПараметры - Произвольный - Любая дополнительная информация, которую необходимо передать на клиент. 
//                                           Значение должно быть простым (сериализуемым в XML строку).
//
Процедура СообщитьПрогресс(Знач Процент = Неопределено, Знач Текст = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание() = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ПередаваемоеЗначение = Новый Структура;
	Если Процент <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Процент", Процент);
	КонецЕсли;
	Если Текст <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Текст", Текст);
	КонецЕсли;
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	КонецЕсли;
	
	ПередаваемыйТекст = ОбщегоНазначения.ЗначениеВСтрокуXML(ПередаваемоеЗначение);
	
	Текст = "{" + СообщениеПрогресса() + "}" + ПередаваемыйТекст;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры

#КонецОбласти

// Считывает информацию о ходе выполнения длительной операции, 
// записанную процедурой ДлительныеОперации.СообщитьПрогресс.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
//
// Возвращаемое значение:
//  Неопределено, Структура - информация о ходе выполнения фонового задания, записанная процедурой СообщитьПрогресс:
//    * Процент                 - Число  - Необязательный. Процент выполнения.
//    * Текст                   - Строка - Необязательный. Информация о текущей операции.
//    * ДополнительныеПараметры - Произвольный - Необязательный. Любая дополнительная информация.
//
Функция ПрочитатьПрогресс(Знач ИдентификаторЗадания) Экспорт
	
	Возврат ПрочитатьПрогрессИСообщения(ИдентификаторЗадания, "Прогресс").Прогресс;
	
КонецФункции

#КонецОбласти

#Область Область2

// Отменяет выполнение фонового задания по переданному идентификатору.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
//
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт 
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ПараметрыСеанса.ОтмененныеДлительныеОперации.Найти(ИдентификаторЗадания) = Неопределено Тогда
		ОтмененныеДлительныеОперации = Новый Массив(ПараметрыСеанса.ОтмененныеДлительныеОперации);
		ОтмененныеДлительныеОперации.Добавить(ИдентификаторЗадания);
		ПараметрыСеанса.ОтмененныеДлительныеОперации = Новый ФиксированныйМассив(ОтмененныеДлительныеОперации);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено
		ИЛИ Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		
		Возврат;
	КонецЕсли;
	
	Попытка
		Задание.Отменить();
	Исключение
		// Возможно задание как раз в этот момент закончилось и ошибки нет.
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Отмена выполнения фонового задания'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти